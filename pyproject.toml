[tool.poetry]
name = "awesome-rss-reader"
version = "0.1.0"
description = ""
authors = ["Sergei Khoroshilov <kh.sergei@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.1"
asyncpg = "^0.28.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.20"}
sqlalchemy-utils = "^0.41.1"
alembic = "^1.11.3"
pydantic = "^2.2.1"
pydantic-settings = "^2.0.3"
dependency-injector = "^4.41.0"
httpx = "^0.24.1"
yarl = "^1.9.2"
psycopg = {extras = ["binary"], version = "^3.1.10"}
sentry-sdk = {extras = ["fastapi", "sqlalchemy"], version = "^1.29.2"}
uvicorn = {extras = ["standard"], version = "^0.23.2"}
structlog = "^23.1.0"
click = "^8.1.7"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
feedparser = "^6.0.10"
python-dateutil = "^2.8.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.285"
mypy = "^1.5.1"
mypy-extensions = "^1.0.0"
types-python-dateutil = "^2.8.19.14"
black = "^23.7.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
pytest-localserver = "^0.8.0"
polyfactory = "^2.7.2"
faker = "^19.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ".git .mypy_cache .pytest_cache .ruff_cache"
python_files = "test_*.py"
addopts = "--tb=native"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore",
]
asyncio_mode = "auto"

[tool.ruff]
select = [
    "F",        # pyflakes
    "E",        # pycodestyle Error
    "W",        # pycodestyle Warning
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ASYNC",    # flake8-async
    "BLE",      # flake8-blind-except
    "FBT",      # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "EM",       # flake8-errmsg
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "INT",      # flake8-gettext
    "PTH",      # flake8-use-pathlib
    "ERA",      # eradicate
    "PGH",      # pygrep-hooks
    "PERF",     # perflint
    "RUF",      # ruff
]
ignore = [
    "B904" ,    # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
    "EM101",    # Exception must not use a string literal, assign to variable first
    "B008",     # Do not perform function call `Depends` in argument defaults
    "EM102",    # Exception must not use an f-string literal, assign to variable first
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]
line-length = 100
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"

[tool.ruff.per-file-ignores]
"tests/factories/*.py" = ["N805", "RUF012"]
"tests/**" = ["FBT001"]

[tool.ruff.flake8-pytest-style]
parametrize-names-type = "csv"
fixture-parentheses = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
force-sort-within-sections = false

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.mypy]
disable_error_code = "misc"
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
strict_equality = true
